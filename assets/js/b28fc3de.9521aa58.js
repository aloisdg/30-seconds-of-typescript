"use strict";(self.webpackChunk_deepakvishwakarma_ts_util=self.webpackChunk_deepakvishwakarma_ts_util||[]).push([[7429],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return m}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},l),{},{components:r})):n.createElement(f,i({ref:t},l))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},18282:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),i=["components"],s={title:"CSVToJSON",tags:["string","array","object","advanced"],author_title:"Deepak Vishwakarma",author_url:"https://github.com/deepakshrma",author_image_url:"https://avatars2.githubusercontent.com/u/7682731?s=400",description:'Implementation of "CSVToJSON" in typescript, javascript and deno.',image:"https://www.positronx.io/wp-content/uploads/2018/11/positronx-banner-1152-1.jpg"},p=void 0,c={unversionedId:"CSVToJSON",id:"CSVToJSON",title:"CSVToJSON",description:'Implementation of "CSVToJSON" in typescript, javascript and deno.',source:"@site/docs/CSVToJSON.md",sourceDirName:".",slug:"/CSVToJSON",permalink:"/30-seconds-of-typescript/docs/CSVToJSON",editUrl:"https://github.com/deepakshrma/30-seconds-of-typescript/edit/master/docs/CSVToJSON.md",tags:[{label:"string",permalink:"/30-seconds-of-typescript/docs/tags/string"},{label:"array",permalink:"/30-seconds-of-typescript/docs/tags/array"},{label:"object",permalink:"/30-seconds-of-typescript/docs/tags/object"},{label:"advanced",permalink:"/30-seconds-of-typescript/docs/tags/advanced"}],version:"current",frontMatter:{title:"CSVToJSON",tags:["string","array","object","advanced"],author_title:"Deepak Vishwakarma",author_url:"https://github.com/deepakshrma",author_image_url:"https://avatars2.githubusercontent.com/u/7682731?s=400",description:'Implementation of "CSVToJSON" in typescript, javascript and deno.',image:"https://www.positronx.io/wp-content/uploads/2018/11/positronx-banner-1152-1.jpg"},sidebar:"someSidebar",previous:{title:"CSVToArray",permalink:"/30-seconds-of-typescript/docs/CSVToArray"},next:{title:"currentURL",permalink:"/30-seconds-of-typescript/docs/currentURL"}},l={},u=[],d={toc:u};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-typescript-blue.svg?style=flat-square",alt:"TS"}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-javascript-yellow.svg?style=flat-square",alt:"JS"}),"\n",(0,o.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-deno-green.svg?style=flat-square",alt:"Deno"})),(0,o.kt)("p",null,"Converts a comma-separated values (CSV) string to a 2D array of objects.\nThe first row of the string is used as the title row."),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.prototype.slice()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.prototype.indexOf('\\n')")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"String.prototype.split(delimiter)")," to separate the first row (title row) into values.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"String.prototype.split('\\n')")," to create a string for each row, then ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.prototype.map()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"String.prototype.split(delimiter)")," to separate the values in each row.\nUse ",(0,o.kt)("inlineCode",{parentName:"p"},"Array.prototype.reduce()")," to create an object for each row's values, with the keys parsed from the title row.\nOmit the second argument, ",(0,o.kt)("inlineCode",{parentName:"p"},"delimiter"),", to use a default delimiter of ",(0,o.kt)("inlineCode",{parentName:"p"},","),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="typescript"',title:'"typescript"'},'type StringMap<T = string> = { [key: string]: T };\n\nconst CSVToJSON = (data: string, delimiter = ",") => {\n  const titles: string[] = data.slice(0, data.indexOf("\\n")).split(delimiter);\n  return data\n    .slice(data.indexOf("\\n") + 1)\n    .split("\\n")\n    .map((v) => {\n      const values = v.split(delimiter);\n      return titles.reduce(\n        (obj, title, index) => ((obj[title] = values[index]), obj),\n        {} as StringMap\n      );\n    });\n};\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="typescript"',title:'"typescript"'},"CSVToJSON(\"col1,col2\\na,b\\nc,d\"); // [{'col1': 'a', 'col2': 'b'}, {'col1': 'c', 'col2': 'd'}];\nCSVToJSON(\"col1;col2\\na;b\\nc;d\", \";\"); // [{'col1': 'a', 'col2': 'b'}, {'col1': 'c', 'col2': 'd'}];\n")))}m.isMDXComponent=!0}}]);