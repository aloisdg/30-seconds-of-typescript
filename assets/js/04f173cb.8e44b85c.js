"use strict";(self.webpackChunk_deepakvishwakarma_ts_util=self.webpackChunk_deepakvishwakarma_ts_util||[]).push([[7076],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,f=d["".concat(s,".").concat(m)]||d[m]||l[m]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1228:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return p},metadata:function(){return c},toc:function(){return l}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],p={title:"unzipWith",tags:["array","function","advanced"],author_title:"Deepak Vishwakarma",author_url:"https://github.com/deepakshrma",author_image_url:"https://avatars2.githubusercontent.com/u/7682731?s=400",description:'Implementation of "unzipWith" in typescript, javascript and deno.',image:"https://www.positronx.io/wp-content/uploads/2018/11/positronx-banner-1152-1.jpg"},s=void 0,c={unversionedId:"unzipWith",id:"unzipWith",title:"unzipWith",description:'Implementation of "unzipWith" in typescript, javascript and deno.',source:"@site/docs/unzipWith.md",sourceDirName:".",slug:"/unzipWith",permalink:"/30-seconds-of-typescript/docs/unzipWith",editUrl:"https://github.com/deepakshrma/30-seconds-of-typescript/edit/master/docs/unzipWith.md",tags:[{label:"array",permalink:"/30-seconds-of-typescript/docs/tags/array"},{label:"function",permalink:"/30-seconds-of-typescript/docs/tags/function"},{label:"advanced",permalink:"/30-seconds-of-typescript/docs/tags/advanced"}],version:"current",frontMatter:{title:"unzipWith",tags:["array","function","advanced"],author_title:"Deepak Vishwakarma",author_url:"https://github.com/deepakshrma",author_image_url:"https://avatars2.githubusercontent.com/u/7682731?s=400",description:'Implementation of "unzipWith" in typescript, javascript and deno.',image:"https://www.positronx.io/wp-content/uploads/2018/11/positronx-banner-1152-1.jpg"},sidebar:"someSidebar",previous:{title:"unzip",permalink:"/30-seconds-of-typescript/docs/unzip"},next:{title:"URLJoin",permalink:"/30-seconds-of-typescript/docs/URLJoin"}},u={},l=[],d={toc:l};function m(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-typescript-blue.svg?style=flat-square",alt:"TS"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-javascript-yellow.svg?style=flat-square",alt:"JS"}),"\n",(0,i.kt)("img",{parentName:"p",src:"https://img.shields.io/badge/supports-deno-green.svg?style=flat-square",alt:"Deno"})),(0,i.kt)("p",null,"Creates an array of elements, ungrouping the elements in an array produced by ",(0,i.kt)("a",{parentName:"p",href:"#zip"},"zip")," and applying the provided function."),(0,i.kt)("p",null,"Note: Provide size to make calculation faster"),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"Math.max.apply()")," to get the longest subarray in the array, ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.prototype.map()")," to make each element an array.\nUse ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.prototype.reduce()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.prototype.forEach()")," to map grouped values to individual arrays.\nUse ",(0,i.kt)("inlineCode",{parentName:"p"},"Array.prototype.map()")," and the spread operator (",(0,i.kt)("inlineCode",{parentName:"p"},"..."),") to apply ",(0,i.kt)("inlineCode",{parentName:"p"},"fn")," to each individual group of elements."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"const unzipWith = (arr: any[], fn: Function, size = 0) =>\n  arr\n    .reduce(\n      (acc, val) => (val.forEach((v: any, i: number) => acc[i].push(v)), acc),\n      Array.from({\n        length: size || Math.max(...arr.map((x) => x.length)),\n      }).map((x) => [])\n    )\n    .map((val: any) => fn(...val));\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="typescript"',title:'"typescript"'},"unzipWith(\n  [\n    [1, 10, 100],\n    [2, 20, 200],\n  ],\n  (...args) => args.reduce((acc, v) => acc + v, 0)\n); // [3, 30, 300]\nunzipWith(\n  [\n    [1, 10, 100],\n    [2, 20, 200],\n  ],\n  (...args) => args.reduce((acc, v) => acc + v, 0),\n  3\n); // [3, 30, 300]\n")))}m.isMDXComponent=!0}}]);